from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from config.config import bot
from utils.csv_download import extract_data_from_csv
from database.dao import add_many, delete_chanel, delete_group
from keyboards.keyboards import main_kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils.csv_download import extract_data_from_csv
from keyboards.keyboards import cancel_keyboard, main_kb
import csv
router = Router()


class AddGroupState(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_csv_file = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
class DeleteGroupState(StatesGroup):
    waiting_for_group_name = State()


class DeleteChannelState(StatesGroup):
    waiting_for_channel_name = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
@router.callback_query(F.data == "add_group")
async def start_add_group(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddGroupState.waiting_for_group_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.message(F.text == "‚ùå –û–¢–ú–ï–ù–ê")
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
@router.message(AddGroupState.waiting_for_group_name)
async def receive_group_name(message: Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddGroupState.waiting_for_csv_file)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
@router.message(AddGroupState.waiting_for_csv_file)
async def process_csv_file(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª
    if not message.document:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.document.mime_type != "text/csv" and not message.document.file_name.endswith(".csv"):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ CSV-—Ñ–∞–π–ª.",
            reply_markup=cancel_keyboard()
        )
        return

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if file_content.seek(0, 2) == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ 0, —Ç–æ —Ñ–∞–π–ª –ø—É—Å—Ç)
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –ø—É—Å—Ç–æ–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=cancel_keyboard()
            )
            return
        
        file_content.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        state_data = await state.get_data()
        group_name = state_data.get("group_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")

        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV
        try:
            data_list = extract_data_from_csv(name=group_name, file_data=file_content.read())
        except (UnicodeDecodeError, csv.Error) as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ CSV –∏–º–µ–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.\n\n–î–µ—Ç–∞–ª–∏: {e}",
                reply_markup=cancel_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–∞–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–≤–ª–µ—á—å
        if not data_list:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª –ª–∏–±–æ –ø—É—Å—Ç–æ–π, –ª–∏–±–æ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ.",
                reply_markup=cancel_keyboard()
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        try:
            await add_many(data=data_list)
        except Exception as db_error:
            await message.answer(
                f"üî¥ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É: {db_error}",
                reply_markup=cancel_keyboard()
            )
            return

        # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ! –í –ë–î –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(data_list)} –∑–∞–ø–∏—Å–µ–π."
        )

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

    except UnicodeDecodeError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.",
            reply_markup=cancel_keyboard()
        )
    except FileNotFoundError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.",
            reply_markup=cancel_keyboard()
        )
    except Exception as error:
        await message.answer(
            f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {error}",
            reply_markup=cancel_keyboard()
        )


# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data == "delete_group")
async def start_delete_group(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(DeleteGroupState.waiting_for_group_name)


@router.message(DeleteGroupState.waiting_for_group_name)
async def process_delete_group(message: Message, state: FSMContext):
    group_name = message.text

    # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã
    deleted_count = await delete_group(name_group=group_name)

    await message.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ *'{group_name}'* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î. –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}"
    )
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data == "delete_chanel")
async def start_delete_channel(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(DeleteChannelState.waiting_for_channel_name)


@router.message(DeleteChannelState.waiting_for_channel_name)
async def process_delete_channel(message: Message, state: FSMContext):
    channel_name = message.text

    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã
    deleted_count = await delete_chanel(name_chanel=channel_name)

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª *'{channel_name}'* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î. –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}"
    )
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
