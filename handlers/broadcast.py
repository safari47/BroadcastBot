from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram import Router, F
from keyboards.keyboards import cancel_keyboard, confirm, main_kb
from aiogram.enums import ContentType
from database.dao import find_all
from utils.pyrogram_mes import broadcast_message_chat
from config.config import broker

router = Router()


class Broadcast(StatesGroup):
    message = State()
    time = State()
    group = State()
    confirm = State()


@router.callback_query(F.data == "broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Broadcast.message)
    await call.message.answer(
        "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "- –¢–µ–∫—Å—Ç üñä\n"
        "- –§–æ—Ç–æ üñº\n"
        "- –í–∏–¥–µ–æ üé•\n"
        "- –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫) üìπ\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∫ –≤–∞—à–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.\n\n"
        "üëâ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.",
        reply_markup=cancel_keyboard(),
    )


@router.message(Broadcast.message)
async def broadcast_message(message: Message, state: FSMContext):
    await state.update_data(message=message)
    await state.set_state(Broadcast.time)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –∫–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É –µ–¥–∏–Ω–æ–∂–¥—ã",
        reply_markup=cancel_keyboard(n=1),
    )


@router.message(Broadcast.time)
async def broadcast_time(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ —Ä–∞–≤–Ω–æ "‚û°Ô∏è –ü–†–û–ü–£–°–¢–ò–¢–¨"
    if not (message.text.isdigit() or message.text == "‚û°Ô∏è –ü–†–û–ü–£–°–¢–ò–¢–¨"):
        await message.answer(
            "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=cancel_keyboard(n=1),
        )
        return
    await state.update_data(time=message.text)
    await state.set_state(Broadcast.group)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞.\n\n"
        "üóÇ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=cancel_keyboard(),
    )



@router.message(Broadcast.group)
async def broadcast_group(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    group_data = await find_all(group_name=message.text)
    if len(group_data) == 0:
        await message.answer(
            "*–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.",
            reply_markup=cancel_keyboard(),
            parse_mode="Markdown",
        )
        return

    await state.update_data(group=message.text)
    data = await state.get_data()
    group_name = data["group"]
    message_data = data["message"]
    time = data["time"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await message.answer(
        f"‚úÖ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:*\n\nüë• –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {group_name},\n\n –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ {time} –º–∏–Ω—É—Ç",
        parse_mode="Markdown",
    )
    await message.answer(text=message_data.text)
    # –°–æ–æ–±—â–∞–µ–º –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ *'‚úÖ –î–ê'* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ *'‚ùå –ù–ï–¢'* –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=confirm(),
        parse_mode="Markdown",
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(Broadcast.confirm)


@router.message(Broadcast.confirm)
async def broadcast_confirm(message: Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_choice = message.text
    if user_choice not in ["‚úÖ –î–ê", "‚ùå –ù–ï–¢"]:
        await message.answer("‚õîÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return

    await state.update_data(confirm=user_choice)

    if user_choice == "‚ùå –ù–ï–¢":
        # –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
        )
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb())
        await state.clear()
    elif user_choice == "‚úÖ –î–ê":
        # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        message_data = data["message"].text
        group_name = data["group"]
        time = data["time"]
        group_list = await find_all(group_name=group_name)
        data = {"group": group_list, "message": message_data, "time": time}
        if time.isdigit():
            await broker.publish(data, channel="broadcast_task_interval")
            await message.answer(
                f"ÔøΩÔøΩ –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.\n\n–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {group_name},\n\n–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ {time} –º–∏–Ω—É—Ç.",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await broker.publish(data, channel="broadcast_task_now")
            await message.answer(
                f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.\n\n–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {group_name},\n\n–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É.",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove(),
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
